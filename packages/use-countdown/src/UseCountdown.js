// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as React from "react";

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* Play */0) {
      return {
              time: state.time,
              playState: "running"
            };
    } else {
      return {
              time: state.time,
              playState: "paused"
            };
    }
  }
  if (action.TAG === /* Restart */0) {
    return {
            time: action._0,
            playState: "running"
          };
  }
  var onEnd = action._0;
  var nextTime = state.time - 100 | 0;
  if (nextTime <= 0) {
    setTimeout((function (param) {
            return Curry._1(onEnd, undefined);
          }), 0);
    return {
            time: 0,
            playState: "paused"
          };
  } else {
    return {
            time: nextTime,
            playState: state.playState
          };
  }
}

function createInterval(fn, frequency) {
  return setInterval((function (param) {
                return Curry._1(fn, undefined);
              }), frequency);
}

function use(duration, onEnd) {
  var timerCallback = React.useRef(function (param) {
        
      });
  var match = React.useReducer(reducer, {
        time: duration !== undefined ? duration : 1,
        playState: "paused"
      });
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          timerCallback.current = (function (param) {
              return Curry._1(dispatch, {
                          TAG: /* Decrement */1,
                          _0: onEnd
                        });
            });
          return (function (param) {
                    
                  });
        }), [
        onEnd,
        dispatch
      ]);
  React.useEffect((function () {
          var tick = function (param) {
            var current = timerCallback.current;
            return Curry._1(current, undefined);
          };
          var match = state.playState;
          var match$1 = state.time === 0;
          if (duration !== undefined && match === "running" && !match$1) {
            var id = setInterval(tick, 100);
            return (function (param) {
                      clearInterval(id);
                      
                    });
          }
          return (function (param) {
                    
                  });
        }), [
        timerCallback,
        state
      ]);
  var play = React.useCallback((function (param) {
          if (state.time !== 0) {
            return Curry._1(dispatch, /* Play */0);
          }
          
        }), [
        state.time,
        dispatch
      ]);
  var pause = React.useCallback((function (param) {
          return Curry._1(dispatch, /* Pause */1);
        }), [dispatch]);
  var restart = React.useCallback((function (param) {
          return Curry._1(dispatch, {
                      TAG: /* Restart */0,
                      _0: duration !== undefined ? duration : 1
                    });
        }), [
        duration,
        dispatch
      ]);
  return React.useMemo((function () {
                return {
                        time: state.time,
                        play: play,
                        pause: pause,
                        restart: restart,
                        playState: state.playState
                      };
              }), [
              state.time,
              play,
              restart,
              pause,
              state.playState
            ]);
}

var frequency = 100;

export {
  frequency ,
  reducer ,
  createInterval ,
  use ,
  
}
/* react Not a pure module */
