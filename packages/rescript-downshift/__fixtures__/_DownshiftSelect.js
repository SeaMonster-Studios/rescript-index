// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Downshift from "downshift";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";
import * as ReactSpread from "@seamonster-studios/react-spread/src/ReactSpread.js";
import * as Downshift_Select from "../src/Downshift_Select.js";

var Select = Downshift_Select.Make({});

function _DownshiftSelect$DownArrow(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  return React.createElement("svg", {
              className: className,
              height: "10",
              width: "16",
              fill: "none",
              viewBox: "0 0 16 10",
              xmlns: "http://www.w3.org/2000/svg"
            }, React.createElement("path", {
                  className: "stroke-current",
                  d: "M1 1L8 9L15 1",
                  stroke: "#22211D",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: "2"
                }));
}

var DownArrow = {
  make: _DownshiftSelect$DownArrow
};

function $$default(param) {
  var items = [
    "Option 1",
    "Option 2",
    "Option 3",
    "Option 5",
    "Option 6"
  ];
  var select = Downshift.useSelect({
        items: items
      });
  var selectedItem = select.selectedItem;
  return React.createElement("div", {
              className: "flex flex-col items-start m-8"
            }, React.createElement(ReactSpread.make, {
                  props: select.getLabelProps(),
                  children: React.createElement("label", {
                        className: "mb-2"
                      }, "Choose an option")
                }), React.createElement(ReactSpread.make, {
                  props: select.getToggleButtonProps(),
                  children: React.createElement("button", {
                        className: "flex focus:bg-black hover:bg-black focus:text-white hover:text-white items-center justify-between border duration-300 w-full   border-black rounded-md px-3 py-2 transition-all",
                        type: "button"
                      }, React.createElement("span", undefined, (selectedItem == null) ? "Options" : selectedItem), React.createElement(_DownshiftSelect$DownArrow, {
                            className: "ml-2 p-1 w-5 h-auto"
                          }))
                }), React.createElement(ReactSpread.make, {
                  props: select.getMenuProps(),
                  children: React.createElement("ul", {
                        className: "bg-white transition-opacity opacity-0 aria-expanded:opacity-100 max-h-40 overflow-y-scroll w-full mt-1 shadow-md"
                      }, select.isOpen ? React.createElement(React.Fragment, undefined, Belt_Array.mapWithIndex(items, (function (index, item) {
                                    return React.createElement(ReactSpread.make, {
                                                props: select.getItemProps({
                                                      item: item,
                                                      index: index
                                                    }),
                                                children: React.createElement("li", {
                                                      className: "text-sm py-2 px-3 first:rounded-t border border-l-black border-r-black last:rounded-b hover:cursor-pointer hover:bg-black hover:text-white aria-selected:text-white aria-selected:bg-black transition-colors duration-500 " + (
                                                        Belt_Option.getWithDefault(Caml_option.nullable_to_opt(select.selectedItem), "") === item ? "bg-black text-white bg-opacity-60" : ""
                                                      )
                                                    }, item),
                                                key: item + String(index)
                                              });
                                  }))) : null)
                }));
}

export {
  Select ,
  DownArrow ,
  $$default ,
  $$default as default,
  
}
/* Select Not a pure module */
